Finally, we want to render the todo items. Each news item is enclosed within a ==item== tag. We will display the title and show the due date as part of the description. Also we prepend the string ==(done)==, if the item has been completed.==ToDoRssFeed>>renderContentOn: rss==    self renderChannelOn: rss.==    self model items==        do: [ :each | self renderItem: each on: rss ]==ToDoRssFeed>>renderItem: aToDoItem on: rss==    rss item: [==        rss title: aToDoItem title.==        rss description: [==            aToDoItem done==                ifTrue: [ rss text: '(done) ' ].==            rss render: aToDoItem due ] ]Doing so will generate the required XML structure for the item tag.=<item>=    <title>Smalltalk</title>=    <description>(done) 5 March 2008</description>=</item>At the minimum, a title or a description must be present. All the other sub-elements are optional. |{!RSS Tag |{!Selector |!Description| ==title== | +index:RRRssRenderCanvas!title+ ==title== | The title of the item.| ==link== | +index:RRRssRenderCanvas!link+ ==link== | The URL of the item. | ==description== | +index:RRRssRenderCanvas!description+ ==description== | Phrase or sentence describing the channel.| ==author== | +index:RRRssRenderCanvas!author+ ==author== | The item synopsis.| ==category== | +index:RRRssRenderCanvas!category+ ==category== | Includes the item in one or more categories.| ==comments== | +index:RRRssRenderCanvas!comments+ ==comments== | URL of a page for comments relating to the item.| ==enclosure== | +index:RRRssRenderCanvas!enclosure+ ==enclosure== | Describes a media object that is attached to the item.| ==guid== | +index:RRRssRenderCanvas!guid+ ==guid== | A string that uniquely identifies the item.| ==pubDate== | +index:RRRssRenderCanvas!pubDate+ ==pubDate== | Indicates when the item was published.| ==source== | +index:RRRssRenderCanvas!source+ ==source== | The RSS channel that the item came from.