Now let's have even more fun.  Since Seaside uses plain Smalltalkrather than templates to build web pages, we can use Smalltalk tobuild the logic of our rendering method.  We are only limited by our imagination and artistic taste.  For example, suppose that we want to display 10 Seaside logos.  We can simply use the ==timesRepeat:== Smalltalk loop as shown in the next method.  See the output in *ref:10images*.==ScrapBook>>renderContentOn: html==    html paragraph: 'Fun with Smalltalk and Seaside.'.==    html paragraph: [==        10 timesRepeat: [==            html image==                url: 'http://www.seaside.st/styles/logo-plain.png';==                width: 50 ] ]+10images|width=90%+Since we're writing Smalltalk, changes are easy.  In the next example, we added a horizontal rule inside the loop but noticed that it didn't look very nice (see *ref:10images-vertical*), so we moved it outside the loop (see *ref:10images-horizontal*).==ScrapBook>>renderContentOn: html==    html paragraph: 'Fun with Smalltalk and Seaside.'.==    html paragraph: [==        10 timesRepeat: [==            html image==                url: 'http://www.seaside.st/styles/logo-plain.png';==                width: 50.==            html horizontalRule ] ]==ScrapBook>>renderContentOn: html==    html paragraph: 'Fun with Smalltalk and Seaside.'.==    html paragraph: [==        10 timesRepeat: [==            html image==                url: 'http://www.seaside.st/styles/logo-plain.png';==                width: 50 ].==        html horizontalRule ]+10images-vertical|width=90%++10images-horizontal|width=90%+Using Seaside's canvas and brushes eliminates many of the errors that occur when manually manipulating tags.