The contents of a callback are not limited to a single message send. A callback can contain any valid Smalltalk code. In a callback you can do anything you want, except that you should never use the render canvas from an outer scope. This canvas will be invalid at the time the callback is executed, as it has already been sent through the wire. Normally callbacks are not used for rendering, with the exception of AJAX. In this case AJAX passes you a new renderer into the callback, never use the old one from the outer scope. This means never refer to the ==html== canvas argument in the rendering method in which the callback is declared.It is sometimes better to put your callback code in a separate method so that you can use it from different callbacks or when subclassing your component. Some callbacks also take an argument that contains the input entered by the user (more on this later).@@important Do not render within callbacks. Do not send any messages to the ==html== canvas while processing callbacks. At the time the callback is evaluated the canvas is not active anymore.Another problem that new Seasiders might run into is that they try to change the state of their application while rendering. This will inevitably lead to confusing errors, so pay attention and memorise the following warning:@@important Do not change state while rendering. Don't instantiate new components. Don't ==call:== components. Don't ==answer==. Don't add or remove decorations (==addDecoration:==, ==isolate:==, ==addMessage:==, etc.). Just produce output and define callbacks that do the fancy stuff you can't do while rendering.