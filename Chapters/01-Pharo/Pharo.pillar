!!Pharo Smalltalk
@cha:gettingstarted-pharo

In this chapter we will show you how to get started with Seaside using the
Seaside “One Click Image”. Within 15 minutes, you will install and launch
Seaside, interact with a Smalltalk IDE and write a simple Seaside counter
application. You will follow the entire procedure of creating a Seaside
application. This process will highlight some of the features of Seaside. If you
are new to Smalltalk, we suggest you to read chapters 3, 4 and 5 of ''Pharo by
Example'' which is a free and online book available from
*htp://www.pharobyexample.org*. This will highlight some of the features of
Smalltalk.

As we mentioned previously, there are several implementations of Smalltalk. Some
are commercial, such as VisualWorks, VA Smalltalk, Gemstone, and Dolphin. Others
are open source, such as Pharo, Squeak and GNU Smalltalk; and finally, some are
free but not open source, such as Smalltalk/X. Seaside is developed in Pharo,
then ported to the other Smalltalks.

!!! Using the One Click Image
@pharoOneClickImage

In this book, we use Seaside 3.0.4, included in the ''One Click Image'' which
you can find on the Seaside website at *www.seaside.st/download*. The
''One Click Image'' is a bundle of everything you need to run Seaside,
including the Pharo implementation of Smalltalk. We suggest that you use this
bundle to start, even if you prefer a different Smalltalk implementation. While
we expect that all of our example code will run in all of the Seaside ports,
we have only tested our code thoroughly in the Smalltalk that is included with
this bundle.

+The Seaside development environment.>file://figures/seasideApplicationDesk.png|width=100|label=fig:seasideDesk+

Begin by downloading the ''One Click Image'' from the site. Unzip the file and
you should be able to launch the Seaside Integrated Development Environment (IDE)
by double clicking on the icon appropriate for your platform. Windows users
should double click Seaside.lnk, Linux users Seaside.sh and MacOS/OS-X users
should simply double click on the application icon created when they unzipped
the file. After this you should see the Seaside development environment open in
a single window on your desktop similar to the one presented in Figure 
*@fig:seasileDesk*.

!!!! Of Mice and Menus
@pharoMiceAndMenu

Because Smalltalk images are intended to work identically on many different
operating systems, you may find some of the user interface may be slightly
different from what you’re used to. In order to help you understand the
differences, we will outline the common stumbling points here.

;Click
:This is a standard mouse click, and is used to move focus to an item, to select an item in a list, and to select sections of text.

;Right Click
:We will use right-click to describe the action that will bring up the ''context menu'' on an item: this menu holds a list of actions relevant to the selected item. Mac users who are using a single button mouse will generally find that pressing the Control key while clicking the mouse button will have the same effect.

;The Third Button
:Smalltalk was first used with three-button mice, and some advanced features of Pharo may require you to emulate a three-button mouse. The ''third-button'' may be bound to another button on your mouse, or the mouse scroll-wheel. Alternatively it may require you to press a key while clicking — the Alt key or the Command (Apple) keys on Macs are common choices. You shouldn’t worry about this until you need it, but it’s useful to know just in case you accidentally invoke one of these actions and wonder where it came from.

;World Menu
:To launch new applications and open new windows, you will use the World Menu. This can be opened by clicking anywhere on your Seaside desktop (i.e., left-clicking on the background area). We will use a shorthand to refer to this: ''World'' | ''Workspace'' means "click on the desktop to bring up the World Menu, then select the ''Workspace'' entry".

;Workspace
:When you want to execute some code, you do so by opening a new workspace from the World Menu: use ''World'' | ''Workspace''.

Try this new knowledge out now: Open a new workspace window. Type ==1 + 1==
into the window, and select it. Now right-click and select ''Print it'' from the
context menu. You should see the answer ==2==.

!!! What is a Smalltalk Image?
@pharoWhatIsSmalltalkImage

All Smalltalk objects live in something called an image. An image is a snapshot
of memory containing all the objects at a given point in time. This means that
your business objects, Seaside objects, all classes and their methods (since
they are also objects), and development tools are all part of the image.
The Seaside ''One Click Image'' includes a Smalltalk image with Seaside and a
number of other tools pre-loaded to make it easier for you to get started using
Seaside.

An image is loaded and executed by a virtual machine. When you ran Pharo in
Section *:  Using the One Click Image>@pharoOneClickImage* you really were
running the virtual machine on the pre-packaged ''One Click Image'' image. For
the sake of brevity we call this "running the image." The Smalltalk image
includes active processes (Smalltalk processes are more akin to "threads" in
other languages). When you load an image from a disk file you bring objects that
were part of that image into RAM and resume execution of the active processes
that were part of that image. If you were debugging when you saved the image,
you’ll still be debugging when you load that image. We like to think of this as
"picking up where you left off" (note that there are limits to this model:
transient objects like a network connection that was active when the image
was saved will not be available when the image is re-loaded). As an example, the
Seaside ''One Click Image'' image was saved with the Comanche web server running
so, when you load this image that web server process will be running. We’ll say
more about that later.

Development in Pharo involves making incremental changes to the image (by
creating classes, methods etc.). You will want to periodically save your
Smalltalk image to disk so that your changes are saved. To save your image,
select ''World'' | ''Save'' (i.e., raise the world menu by clicking somewhere in
the background of the Pharo window, and click “Save” in that menu, as described
previously). If you quit Pharo using ''World'' | ''Quit'', you will also be
prompted to save your image. You may resume your development efforts by running
the image, as we did in Section
*:  Using the One Click Image>@pharoOneClickImage*.

!!! The Comanche Server
@pharoComancheServer

The ''One Click Image'' image includes a web server called "Comanche" listening
on TCP port 8080. You should check that this server is properly running by
pointing your web browser to *http://localhost:8080/*. You should see something
like Figure *@fig:seasideServer*. If you don’t see this page, it is possible
that port 8080 is already in use by another application on your computer.

+The Seaside server running.>file://figures/seasideServer.png|width=100|label=fig:seasideServer+

""Changing the Seaside port number.""
If you did not see Figure *@fig:seasideServer*, you will need to try modifying
the workspace to restart the Comanche web server on a different port number
(like 8081). The script *@scr:startServer* asks the server to stop serving and start
serving on port 8081.

[[[language=smalltalk|label=scr:startServer|caption=Stop the server and start a new one.

WAKom stop.
WAKom startOn: 8081.

]]]

To execute this, you would open a new workspace using ''World'' | ''Workspace'',
enter the text, select it, right-click for the context menu, and select
''Do it''.

Once you have done this, you can try to view it in your browser making sure you
use the new port number in your URL. Once you have found an available port, make
sure you note what port the server is running on. Throughout this book we assume
port 8080 so if you’re using a different port you will have to modify any URLs
we give you accordingly.

!!! A First Seaside Component
@pharoFirstSeasideComponent

Now we are ready to write our first Seaside component. We are going to code a
simple counter. To do this we will define a component, add some state to that
component, and then create a couple of methods that define how the component is
rendered in the web browser. We will then register it as a Seaside application.
Finally we will see how we can save our work as a "Monticello" package.

!!!! Defining a Category
@pharoDefineCategory

To start with, we define a new category that will contain the class that defines
our component. If you don’t have a class browser open yet, open one using
''World'' | ''System Browser''. Raise the context menu for the category pane on
the top left and select ''Add category...''. The menu can be found by
right-clicking onto the list pane. You will get prompted to give a name as shown
in Figure *@fig:createCategory*. We will use the name ==WebCounter== for our
category.

+Create a category.>file://figures/createCategory.png|width=100|label=fig:createCategory+

Figure *@fig:categoryCreated* shows that the category has been created. Now we
are ready to define a component.

+An empty category has been created.>file://figures/categoryCreated.png|width=100|label=categoryCreated+

In Pharo images you will often find the terms "Package" and "Category" used
interchangeably. "Category" is a technical term based on the internal
implementation, while "Package" better describes the intent of this pane. From
now on, we will be using the term "Package".


!!!! Defining a Component
@pharoDefineComponent

Now we will define a new component named ==WebCounter==. In Seaside, a
''component'' refers to any class which inherits from the class ==WAComponent==
(either directly or indirectly).

@@note It is only a coincidence that this class has the same name as its package. Normally packages will contain several classes, and the package names and class names are unrelated.

To start creating your class, click on the ==WebCounter== package you just
created, to ensure that it is selected. The "class creation template" will
appear in the source pane of the browser. Edit this template so that it looks as
in the script *@scr:pharoClassTemplate*

[[[language=smalltalk|caption=Pharo class template for the ==Web Counter==|label=scr:pharoClassTemplate

WAComponent subclass: #WebCounter
    instanceVariableNames: 'count'
    classVariableNames: ''
    poolDictionaries: ''
    category: 'WebCounter'

]]]

Notice that lines 3 and 4 contain two consecutive single quote characters, not a
double quote character. We are specifying that the ==WebCounter== class is a new
subclass of ==WAComponent==. We also specify that this class has one instance
variable named count. The other arguments are empty, so we just pass an empty
string, indicated by two consecutive quote marks. The "category" value should
already match the package name. Note that an orange triangle in the top-right
indicates that the code is not compiled yet.

Once you are done entering the class definition, right-click anywhere in that
pane to bring up the context menu, and select the menu item ''Accept (s)'' as
shown in Figure *fig:createClass*. Accept in Smalltalk jargon roughly means
compile.

+Creating the class ==WebCounter==.>file://figures/createClass.png|width=100|label=fig:createClass+

Once you have accepted, your browser should look similar to the one shown in
Figure *@fig:createdClass*. The browser now shows the class that you have
created in the class pane. Now we are ready to define some behaviour for our
component.

+The class has been created.>file://figures/createdClass.png|width=100|label=createdClass+

!!!! Defining the Code
@pharoDefineCode

Now we are ready to define some methods for our component. We will define
methods that will be executed on an instance of the ==WebCounter== class. We
call them instance methods since they are executed in reaction to a message
sent to an instance.

The first method that we will define is the ==initialize== method, which will be
invoked when an instance of our component is created by Seaside. Seaside follows
normal Smalltalk convention, and will create an instance of the component for us
by using the message ==new==, which will create the new instance and then send
the message ==initialize== to this new instance.

First raise the context menu in the "method category" pane and select
''Add category...'' as shown in Figure *@fig:addProtocol*. Select
''initialization'' from the resulting dialog, which will add ==initialization==
to the method category pane. Method categories have no effect on the
functionality of your components; they are intended to help you organise your
work.

+Adding a method category.>file://figures/addProtocol.png|width=100|label=fig:addProtocol+

Now ensure that the ==initialization== method category is selected, and then
enter the script *@scr:WebCounterInitialize* in the source pane — remember that you do not have to type
==WebCounter>>== in the source code pane.

[[[language=smalltalk|label=scr:WebCounterInitialize|caption=WebCounter initialize method.

WebCounter>>initialize
   super initialize.
   count := 0

]]]

Remember that this definition states that the method ==initialize== is an
instance side method since the word ==class== does not appear between
==WebCounter== and ==>>== in the definition.

Once you are done typing the method definition, bring up the context menu for
the code pane and select the menu item ''accept (s)'', as shown in Figure
*@fig:compilingMethod*.

At this point Pharo might ask you to enter your full name. This is for the
source code version control system to keep track of the author that wrote this
code.

+Compiling a method.>file://figures/compilingMethod.png|width=100|label=fig:compilingMethod+

The method signature will also appear in the method pane as shown in Figure
*@fig:compiledMethod*.

+The method has been compiled.>file://figures/compiledMethod.png|width=100|label=fig:compiledMethod+

Now let’s review what this means. To create a method, we need to define two
things, the name of the method and the code to be executed. The first line gives
the name of the method we are defining. The next line invokes the superclass
==initialize== method. The final line sets the value of the count instance
variable to 0.

To be ready to define Seaside-specific behaviour, now create a new method
category called actions. From the method category pane bring up the context menu
and select ''Add category...'' and type the new category actions. In this new
category define two more instance methods to change the counter state as in
scripts *@scr:increaseMethod* and *@scr:decreaseMethod*.

[[[language=smalltalk|caption=Increase method.|label=scr:increaseMethod

WebCounter>>increase
    count := count + 1

]]]

[[[language=smalltalk|caption=Decrease method.|label=scr:decreaseMethod

WebCounter>>decrease
    count := count - 1

]]]

@@note Many programmers like to keep their hands on the keyboard, avoiding the mouse whenever possible. Most of the actions we have described have keyboard shortcuts. Keyboard shortcuts for menu item actions are often indicated in the menu itself. For example the ''Accept (s)'' menu item can be activated by pressing the correct keyboard qualifier key together with the s-key. The keyboard qualifier key depends on what platform you’re using, it may be ''command'', ''control'' or ''alt'' depending on your platform.

!!!! Rendering a Counter
@pharoRenderCounter

Now we can focus on Seaside specific methods. We will define the method
==renderContentOn:== to display the counter as a heading. When Seaside needs
to display a component in the web browser, it calls the ==renderContentOn:==
method of the component, which allows the component to decide how it should be
rendered.

Add a new method category called rendering, and add the method definition in
script *@scr:pharoRenderContentOn*

[[[language=smalltalk|caption=Example of ==renderContentOn:== method|label=scr:pharoRenderContentOn

WebCounter>>renderContentOn: html
    html heading: count

]]]

We want to display the value of the variable count by using an HTML heading tag.
In Seaside, rather than having to write the HTML directly, we simply send the
message ==heading:== to the html object that we were given as an argument.

As we will see later, when we have completed our application, this method will
give us output as shown in Figure *@fig:simpleCounter*.

+A simple counter.>file://figures/simpleCounter.png|width=100|label=simpleCounter+

!!!! Registering as a Seaside Application
@pharoRegisterSeasideApp

We will now register our component as an application so that we can access it
directly from the web browser. To register a component as an application, we
need to send the message ==register:asApplicationAt:== to ==WAAdmin==.

==WAAdmin register: WebCounter asApplicationAt: 'webcounter'== will register the
component ==WebCounter== as the application named ==webcounter==. The argument
we add to the ==register:asApplicationAt:== message specifies the root component
and the path that will be used to access the component from the web browser. You
can reach the application under the URL *http://localhost:8080/webcounter*.

Use ''World'' | ''Workspace'' to open a workspace, which is an area where you
can run snippets of code. Type the text shown above, then select it with the
mouse and bring up the context menu and select ''Do it (d)'', alternatively use
the keyboard shortcut.

+Register a component as an application from a workspace.>file://figures/registerComponent.png|width=100|label=fig:registerComponent+

Now you can launch the application in your web browser by going to
*http://localhost:8080/webcounter/* and you will see your first Seaside
component running.

@@todo Put the link to section 7.2 in pillar

If you’re already familiar with HTML, you may want to look at the introduction
to halos in Section 7.2 to learn a little more about how to investigate what’s
happening under the covers.

!!!! Automatically Registering a Component
@pharoAutomitacRegistery

In the future, you may want to automatically register some applications whenever
your package is loaded into an image. To do this, you simply need to add the
registration expression to the ''class'' ==initialize== method of the component.
A ''class'' ==initialize== method is automatically invoked when the class is
loaded from a file. The script *@scr:classInitialize* the ==initialize== class
method definition.

[[[language=smalltalk|caption=Automitically register your application with an initialize method.|label=scr:classInitialize

WebCounter class>>initialize
    WAAdmin register: self asApplicationAt: 'webcounter'

]]]

The word "class" in the ==WebCounter class>>== first line indicates that this
must be added as a class method as described below.

Because this code is in the ==WebCounter== class, we can use the term self in
place of the explicit reference to ''WebCounter'' that we used in the previous
section. In Smalltalk we avoid hardcoding class names whenever possible.

Let’s implement the method. Select the class ==WebCounter==, click on the
''Class'' button under the class pane. You are now browsing the class methods of
the class ==WebCounter== (and there are none yet). Define a method category as
we did previously: click on the third pane and bring up the context menu. From
this menu, select the menu item add category, and from the list select or type
==class initialization==. Then in the bottom pane define and accept the method
==initialize== as shown in Figure *@fig:compilingClassMethod*.

+Compiling a class method.>file://figures/compilingClassMethod.png|width=100|label=compilingClassMethod+

In the future, we will add configuration parameters to this method, so it is
important to be familiar with creating it. Remember that this method is executed
automatically only when the class is loaded into memory from some external
file/source. So if you had not already executed
==WAAdmin register: WebCounter asApplicationAt: 'webcounter'== Seaside would
still not know about your application. To execute the ==initialize== method
manually, type ==WebCounter initialize== in a workspace; your application will
be registered and you will be able to access it in your web browser.

@@important Automating the configuration of your Seaside application via class-side ==initialize== methods play an important role in building deployable Smalltalk images because of their role when packages are brought into base images, and is a useful technique to bear in mind for future use.

The following Figure *@fig:executableComment.png*  shows a trick Smalltalkers
often use: it adds the expression to be executed as comment in the method. This
way you just have to put your cursor after the first double quote, click once to
select the expression and execute it using the ''Do it (d)'' menu item or shortcut.

+Adding the executable comment.>file://figures/executableComment.png|width=100|label=fig:executableComment+

!!!! Adding Behavior
@pharoAddBehavior

Now we can add some actions to our component. We will start with a very simple
change; we will let the user change the value of the count variable by defining
callbacks attached to links (also known as anchors) displayed when the component
is rendered in a web browser, as shown in Figure *@fig:addLink*. Using callbacks
allows us to define some code that will be executed when a link is clicked.

+A simple counter with actions.>file://figures/addLink.png|width=100|label=fig:addLink+

We modify the method ==WAComponent>>renderContentOn:== as in script
*@scr:addCallback*.

[[[language=smalltalk|caption=Add anchors and callbacks to your counter|label=scr:addCallback

WebCounter>>renderContentOn: html
    html heading: count.
    html anchor
        callback: [ self increase ];
        with: '++'.
    html space.
    html anchor
        callback: [ self decrease ];
        with: '--'
]]]

@@note Don’t forget that ==WAComponent>>renderContentOn:== is on the ''instance'' side.

Each callback is given a Smalltalk block: an anonymous method (strictly, a
''lexical closure'') delimited by [ and ]. Here we send the message
==callback:== (to the result of the anchor message) and pass the block as the
argument. In other words, we ask Seaside to execute our callback block whenever
the user clicks on the anchor.

Click on the links to see that the counter get increased or decreased as shown
in Figure *fig:callbackResult*.

+A simple counter with a different value.>file://figures/callbackResult.png|width=100|label=fig:callbackResult+

!!!! Adding a Class Comment
@pharoClassComment

A class comment (along with method comments) can help other developers
understand a class. With your ==WebCounter== class selected, press the class
comment button ==?== in the class browser. The code pane in the browser will now
show a class comment template. Delete this template and enter the comment shown
in Figure *fig:classComment*. Use the context menu ''Accept (s)'' item to save
your comment.

When you’re studying a Smalltalk framework, class comments are a pretty good
place to start reading. Classes that don’t have them require a lot more
developer effort to figure out so get in the habit of adding these comments to
all of your classes.

+A class comment.>file://figures/classComment.png|width=100|label=fig:classComment+

!!! Saving your Package to Monticello
@pharoMonticello

The Smalltalk image is a great place to work with live objects. It has a few
drawbacks though, so it is useful to have some way to store your Smalltalk code
in traditional files or on a server to share with others. Pharo uses the
Monticello (*http://www.wiresong.ca/Monticello/*) source code control system for
this purpose. Monticello stores code in repositories. These repositories can be
network servers, databases, email, or just simple directories on a disk. We will
create a directory repository so that Monticello can store your packages in
files on your disk.

@@note The Pharo and Squeak communities use a free online repository called SqueakSource at *http://www.squeaksource.com/* for sharing and collaborating on projects. Once you have registered as a member, you will be able to contribute to existing projects or start your own to save and share your code online. See the SqueakSource help pages for details.

;Open Monticello
:You can open Monticello by using ''World'' | ''Monticello Browser''. You will see two main panes. The left hand pane shows packages installed in your image, and the right hand pane shows the repositories those packages came from.

;Create your package
:First create a package for your code, by pressing the +Package button. You should call your package ''WebCounter'' to ensure that it is automatically associated with the class category of the same name that you have already created.

;Create a repository
:Next, create a directory on your hard drive where you would like to store your Smalltalk source code. Now, in the Monticello browser in Pharo make sure no package is selected in the package pane. Click on the +Repository button and pick "Directory" from the resulting popup menu. You will be presented with a file/directory browser. Navigate to, and select, the directory you created. You should see this directory listed in the repository pane of the Monticello browser. Make sure this new repository is highlighted and select ''add to package...'' from the repository pane context menu. Select the ==WebCounter== package from the resulting menu. You will need to navigate past a large number of package names to find the ==WebCounter== package.

+Monticello Browser.>file://figures/monticelloBrowser.png|width=100|label=fig:monticelloBrowser+

;Publishing your package
:With all of this setup out of the way you can now save your package to the repository by selecting your package in the package pane, selecting your new repository in the repository pane and pressing Save. You will be asked to include a comment. Normally you indicate in a few words what you changed since the last time you saved the package. For now we just enter "initial dump" and press ''Accept''.

Normally you would publish a package any time you have made significant changes
to it. That way if your image should become corrupted you can load the code from
your last saved version.

Monticello can also be used to facilitate having multiple developers work
simultaneously on a single package of code. For this you need a FTP or HTTP
repository like SqueakSource. We will not discuss this advanced usage here,
though.

;Loading packages
:Once your package has been published to a Monticello repository, it can be loaded into any Pharo image. To load your package into an image, first make sure that your repository is listed in this new image. If it isn’t, repeat the steps listed in ''Create'' a repository above. Now, in the Monticello browser, select your repository in the right pane and press ''Open''. You will be presented with a repository browser such as the one shown in Figure *@fig:repositoryBrowser*. In the left pane, select the ==WebCounter== package; in the right pane select the version; and then click ''Load''.

+Monticello Repository Browser.>file://figures/repositoryBrowser.png|width=100|label=fig:repositoryBrowser+

!!! Summary
@pharoSummary

@@todo real pillar link to Part II

You have now learned how to define a component, register it, modify it and save
your code to a file. Now you are ready to proceed to Part II to learn all the
details of using Seaside to build powerful web applications.
